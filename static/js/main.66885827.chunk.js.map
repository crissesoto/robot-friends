{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","container/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","aria-label","onChange","Card","props","style","width","src","id","waves","height","name","username","email","CardList","cats","fluid","map","user","i","key","ErrorBoundry","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAeeA,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,kBAAC,IAAD,CAAQC,UAAU,sCAChB,2BACAA,UAAU,gCACVC,KAAK,OAAOC,YAAY,SACxBC,aAAW,SACXC,SAAYL,MCOHM,EAdF,SAACC,GACV,OACQ,kBAAC,IAAD,CAAUN,UAAU,cAAcO,MAAO,CAAEC,MAAO,UAC9C,kBAAC,IAAD,CAAcR,UAAU,YAAYS,IAAG,+BAA0BH,EAAMI,GAAhC,aAA+CC,OAAK,EAACJ,MAAO,CAAEC,MAAO,QAASI,OAAQ,WAC7H,kBAAC,IAAD,CAAaZ,UAAU,eACnB,kBAAC,IAAD,KAAeM,EAAMO,MACrB,kBAAC,IAAD,KAAcP,EAAMQ,UACpB,kBAAC,IAAD,KAAcR,EAAMS,UCezBC,EApBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,kBAAC,IAAD,CAAcC,OAAK,EAAClB,UAAU,cAE1BiB,EAAKE,KAAI,SAACC,EAAMC,GACd,OAEE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIO,EAAKI,GAAGX,GACZG,KAAMI,EAAKI,GAAGR,KACdE,MAAOE,EAAKI,GAAGN,aCQdQ,E,YApBX,WAAYjB,GAAO,IAAD,8BACd,4CAAMA,KACDkB,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAGG,KAAKJ,MAAMC,SACH,qDAEJG,KAAKtB,MAAMwB,a,GAjBCC,aC8CZC,E,YAzCX,aAAc,IAAD,8BACT,+CAQJC,eAAkB,SAACC,GACf,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SARzC,EAAKb,MAAQ,CACTP,KAAM,GACNkB,YAAa,GACbtB,KAAM,UALD,E,iFAaO,IAAD,OACfyB,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAACZ,KAAMyB,S,+BAKpB,IAAD,OAEFC,EAAiBf,KAAKJ,MAAMP,KAAK2B,QAAO,SAACC,GAC3C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKvB,MAAMW,YAAYW,kBAEpE,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAc9C,UAAU,eACpB,wBAAIA,UAAU,uCAAd,4BACA,kBAAC,EAAD,CAAWD,aAAgB6B,KAAKK,eAAgBpB,KAAMe,KAAKJ,MAAMX,QAErE,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUI,KAAM0B,U,GAnCdZ,a,kBCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.66885827.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBCol } from \"mdbreact\";\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <MDBCol className=\"d-flex justify-content-center mb-3\">\n      <input \n      className=\"form-control text-center w-50\" \n      type=\"text\" placeholder=\"Search\"\n      aria-label=\"Search\"\n      onChange = {searchChange} />\n    </MDBCol>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\nimport {MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText} from 'mdbreact';\n\nconst Card = (props) => {\n    return (\n            <MDBCard  className=\"p-3 b-3 m-3\" style={{ width: \"240px\" }}>\n                <MDBCardImage className=\"img-fluid\" src={`https://robohash.org/${props.id}?set=set4`} waves style={{ width: \"200px\", height: \"200px\" }}/>\n                <MDBCardBody className=\"text-center\">\n                    <MDBCardTitle>{props.name}</MDBCardTitle>\n                    <MDBCardText>{props.username}</MDBCardText>\n                    <MDBCardText>{props.email}</MDBCardText>\n                </MDBCardBody>\n            </MDBCard>\n  )\n}\n\n\nexport default Card;","\nimport React from 'react';\nimport Card from './Card';\nimport { MDBContainer } from 'mdbreact';\n\nconst CardList = ({ cats }) => {\n  return (\n    <MDBContainer fluid className=\"d-flex row\">\n      {\n        cats.map((user, i) => {\n          return (\n            \n            <Card\n              key={i}\n              id={cats[i].id}\n              name={cats[i].name}\n              email={cats[i].email}\n              />\n          );\n        })\n      }\n    </MDBContainer>\n  );\n}\n\nexport default CardList;","import React, {Component} from 'react';\n\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Something went wrong!</h1>\n        }\n        return this.props.children\n    }\n};\n\nexport default ErrorBoundry;","import React, {Fragment, Component} from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { MDBContainer } from 'mdbreact';\n\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state = {\n            cats: [],\n            searchField: '', \n            name: 'crisse',\n        }\n    };\n    // create function to console the event of onChange()\n    onSearchChange =  (event) =>{\n        this.setState({searchField: event.target.value})\n    };\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n            return response.json()\n        }).then(users =>{\n            this.setState({cats: users})\n        });\n    }\n\n\n    render(){\n    //console.log(event.target.value);\n    const filteredRobots = this.state.cats.filter((robot) =>{\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    })\n    return(\n        <Fragment>\n            <MDBContainer className=\"text-center\">\n                <h1 className=\"tex-center m-4 green-text display-4\"> Robots and Cats Friends</h1>\n                <SearchBox searchChange = {this.onSearchChange} name={this.state.name}/>\n            </MDBContainer>\n            <ErrorBoundry>\n                <CardList cats={filteredRobots} />\n            </ErrorBoundry>\n        </Fragment>\n    )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\n\n\n// MDB\nimport 'mdbreact';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\n// ServiceWork (default)\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}